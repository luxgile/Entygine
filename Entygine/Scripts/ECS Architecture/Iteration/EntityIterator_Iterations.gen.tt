<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
namespace Entygine.Ecs
{
    public partial class EntityIterator
    {
<#
int parameters = 8;
List<string> AllModeCombinationsFor(int amount)
{
    if (amount == 0)
        return new List<string>() { "" };

    var oneFewerResult = AllModeCombinationsFor(amount - 1);

    return oneFewerResult.SelectMany(oldResult =>
        {
            if (oldResult == "")
            {
                return new List<string>() { "R","W" };
            }
            var result = new List<string>()
            {
                oldResult+"W"
            };
            char lastChar = oldResult[oldResult.Length-1];
            if (lastChar == 'R')
                result.Add(oldResult+"R");

            return result;
        }).ToList();
}
foreach(var str in AllModeCombinationsFor(parameters))
{
#>      public delegate void <#= str #><<#
for(int i = 0; i < str.Length; i++)
{
char c = str[i];
if(c == 'R') { #>C<#= i #><# }
if(c == 'W') { #>C<#= i #><# }
if(i != str.Length - 1) {#>, <#}
}
#>>(<#

for(int i = 0; i < str.Length; i++)
{
char c = str[i];
if(c == 'R') { #>in C<#= i #> read<#= i #><# }
if(c == 'W') { #>ref C<#= i #> write<#= i #><# }
if(i != str.Length - 1) {#>, <#}
}
#>); 
<#
}
#>
    }
}