using System.Runtime.CompilerServices;
using Entygine.Async;

namespace Entygine.Ecs
{
    public partial class EntityIterator
    {
		public delegate void r<C0>(in C0? c0) where C0 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0>(r<C0> iterator) where C0 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					iterator(in c0);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void R<C0>(in C0 c0) where C0 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0>(R<C0> iterator) where C0 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					iterator(in c0);
				}
			}));
			return this;
		}
		public delegate void V<C0>(ref C0? c0) where C0 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0>(V<C0> iterator) where C0 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					iterator(ref c0);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void W<C0>(ref C0 c0) where C0 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0>(W<C0> iterator) where C0 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					iterator(ref c0);
				}
			}));
			return this;
		}
		public delegate void rr<C0, C1>(in C0? c0, in C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(rr<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(in c0, in c1);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void Rr<C0, C1>(in C0 c0, in C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(Rr<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(in c0, in c1);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void RR<C0, C1>(in C0 c0, in C1 c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(RR<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					iterator(in c0, in c1);
				}
			}));
			return this;
		}
		public delegate void Vr<C0, C1>(ref C0? c0, in C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(Vr<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(ref c0, in c1);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VR<C0, C1>(ref C0? c0, in C1 c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(VR<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					iterator(ref c0, in c1);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VV<C0, C1>(ref C0? c0, ref C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(VV<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(ref c0, ref c1);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void Wr<C0, C1>(ref C0 c0, in C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(Wr<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(ref c0, in c1);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WR<C0, C1>(ref C0 c0, in C1 c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(WR<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					iterator(ref c0, in c1);
				}
			}));
			return this;
		}
		public delegate void WV<C0, C1>(ref C0 c0, ref C1? c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(WV<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					iterator(ref c0, ref c1);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WW<C0, C1>(ref C0 c0, ref C1 c1) where C0 : struct, IComponent where C1 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1>(WW<C0, C1> iterator) where C0 : struct, IComponent where C1 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					iterator(ref c0, ref c1);
				}
			}));
			return this;
		}
		public delegate void rrr<C0, C1, C2>(in C0? c0, in C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(rrr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(in c0, in c1, in c2);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void Rrr<C0, C1, C2>(in C0 c0, in C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(Rrr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(in c0, in c1, in c2);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void RRr<C0, C1, C2>(in C0 c0, in C1 c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(RRr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(in c0, in c1, in c2);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void RRR<C0, C1, C2>(in C0 c0, in C1 c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(RRR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(in c0, in c1, in c2);
				}
			}));
			return this;
		}
		public delegate void Vrr<C0, C1, C2>(ref C0? c0, in C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(Vrr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, in c1, in c2);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VRr<C0, C1, C2>(ref C0? c0, in C1 c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(VRr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, in c1, in c2);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VRR<C0, C1, C2>(ref C0? c0, in C1 c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(VRR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, in c1, in c2);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVr<C0, C1, C2>(ref C0? c0, ref C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(VVr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, in c2);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVR<C0, C1, C2>(ref C0? c0, ref C1? c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(VVR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, ref c1, in c2);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVV<C0, C1, C2>(ref C0? c0, ref C1? c1, ref C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(VVV<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, ref c2);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void Wrr<C0, C1, C2>(ref C0 c0, in C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(Wrr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, in c1, in c2);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WRr<C0, C1, C2>(ref C0 c0, in C1 c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WRr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, in c1, in c2);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WRR<C0, C1, C2>(ref C0 c0, in C1 c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WRR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, in c1, in c2);
				}
			}));
			return this;
		}
		public delegate void WVr<C0, C1, C2>(ref C0 c0, ref C1? c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WVr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, in c2);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVR<C0, C1, C2>(ref C0 c0, ref C1? c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WVR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, ref c1, in c2);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVV<C0, C1, C2>(ref C0 c0, ref C1? c1, ref C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WVV<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, ref c2);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWr<C0, C1, C2>(ref C0 c0, ref C1 c1, in C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WWr<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, in c2);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWR<C0, C1, C2>(ref C0 c0, ref C1 c1, in C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WWR<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, ref c1, in c2);
				}
			}));
			return this;
		}
		public delegate void WWV<C0, C1, C2>(ref C0 c0, ref C1 c1, ref C2? c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WWV<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					iterator(ref c0, ref c1, ref c2);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWW<C0, C1, C2>(ref C0 c0, ref C1 c1, ref C2 c2) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2>(WWW<C0, C1, C2> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					iterator(ref c0, ref c1, ref c2);
				}
			}));
			return this;
		}
		public delegate void rrrr<C0, C1, C2, C3>(in C0? c0, in C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(rrrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(in c0, in c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void Rrrr<C0, C1, C2, C3>(in C0 c0, in C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(Rrrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(in c0, in c1, in c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void RRrr<C0, C1, C2, C3>(in C0 c0, in C1 c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(RRrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(in c0, in c1, in c2, in c3);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void RRRr<C0, C1, C2, C3>(in C0 c0, in C1 c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(RRRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(in c0, in c1, in c2, in c3);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void RRRR<C0, C1, C2, C3>(in C0 c0, in C1 c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(RRRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(in c0, in c1, in c2, in c3);
				}
			}));
			return this;
		}
		public delegate void Vrrr<C0, C1, C2, C3>(ref C0? c0, in C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(Vrrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VRrr<C0, C1, C2, C3>(ref C0? c0, in C1 c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VRrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VRRr<C0, C1, C2, C3>(ref C0? c0, in C1 c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VRRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VRRR<C0, C1, C2, C3>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VRRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, in c1, in c2, in c3);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVrr<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVRr<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVRR<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVVr<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, ref C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVVr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVVR<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVVR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVVV<C0, C1, C2, C3>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(VVVV<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void Wrrr<C0, C1, C2, C3>(ref C0 c0, in C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(Wrrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WRrr<C0, C1, C2, C3>(ref C0 c0, in C1 c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WRrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WRRr<C0, C1, C2, C3>(ref C0 c0, in C1 c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WRRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, in c1, in c2, in c3);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WRRR<C0, C1, C2, C3>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WRRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, in c1, in c2, in c3);
				}
			}));
			return this;
		}
		public delegate void WVrr<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVRr<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVRR<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVVr<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, ref C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVVr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVVR<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVVR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVVV<C0, C1, C2, C3>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WVVV<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWrr<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, in C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWrr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWRr<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, in C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWRr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWRR<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWRR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, in c2, in c3);
				}
			}));
			return this;
		}
		public delegate void WWVr<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2? c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWVr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWVR<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWVR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWVV<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWVV<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWr<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2 c2, in C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWWr<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWR<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWWR<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, ref c2, in c3);
				}
			}));
			return this;
		}
		public delegate void WWWV<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWWV<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWW<C0, C1, C2, C3>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3>(WWWW<C0, C1, C2, C3> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					iterator(ref c0, ref c1, ref c2, ref c3);
				}
			}));
			return this;
		}
		public delegate void rrrrr<C0, C1, C2, C3, C4>(in C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(rrrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void Rrrrr<C0, C1, C2, C3, C4>(in C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(Rrrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void RRrrr<C0, C1, C2, C3, C4>(in C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(RRrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void RRRrr<C0, C1, C2, C3, C4>(in C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(RRRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void RRRRr<C0, C1, C2, C3, C4>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(RRRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void RRRRR<C0, C1, C2, C3, C4>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(RRRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(in c0, in c1, in c2, in c3, in c4);
				}
			}));
			return this;
		}
		public delegate void Vrrrr<C0, C1, C2, C3, C4>(ref C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(Vrrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VRrrr<C0, C1, C2, C3, C4>(ref C0? c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VRrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VRRrr<C0, C1, C2, C3, C4>(ref C0? c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VRRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VRRRr<C0, C1, C2, C3, C4>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VRRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VRRRR<C0, C1, C2, C3, C4>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VRRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVrrr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVRrr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVRRr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVRRR<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVVrr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVRr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVRR<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVVVr<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVVr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVVR<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVVR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVVVV<C0, C1, C2, C3, C4>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(VVVVV<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void Wrrrr<C0, C1, C2, C3, C4>(ref C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(Wrrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WRrrr<C0, C1, C2, C3, C4>(ref C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WRrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WRRrr<C0, C1, C2, C3, C4>(ref C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WRRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WRRRr<C0, C1, C2, C3, C4>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WRRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WRRRR<C0, C1, C2, C3, C4>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WRRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4);
				}
			}));
			return this;
		}
		public delegate void WVrrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVRrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVRRr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVRRR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVVrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVRr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVRR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVVVr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVVr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVVR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVVR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVVVV<C0, C1, C2, C3, C4>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WVVVV<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWrrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, in C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWrrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWRrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, in C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWRrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWRRr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWRRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWRRR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWRRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4);
				}
			}));
			return this;
		}
		public delegate void WWVrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVRr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVRR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWVVr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVVr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVVR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVVR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWVVV<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWVVV<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWrr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, in C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWrr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWRr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWRr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWRR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWRR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4);
				}
			}));
			return this;
		}
		public delegate void WWWVr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWVr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWVR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWVR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWVV<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWVV<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWr<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWWr<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWR<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWWR<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4);
				}
			}));
			return this;
		}
		public delegate void WWWWV<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWWV<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWW<C0, C1, C2, C3, C4>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4>(WWWWW<C0, C1, C2, C3, C4> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4);
				}
			}));
			return this;
		}
		public delegate void rrrrrr<C0, C1, C2, C3, C4, C5>(in C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(rrrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void Rrrrrr<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(Rrrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void RRrrrr<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(RRrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void RRRrrr<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(RRRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void RRRRrr<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(RRRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void RRRRRr<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(RRRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void RRRRRR<C0, C1, C2, C3, C4, C5>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(RRRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(in c0, in c1, in c2, in c3, in c4, in c5);
				}
			}));
			return this;
		}
		public delegate void Vrrrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(Vrrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VRrrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VRrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VRRrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VRRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VRRRrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VRRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VRRRRr<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VRRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VRRRRR<C0, C1, C2, C3, C4, C5>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VRRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVrrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVRrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVRRrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVRRRr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVRRRR<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVVrrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVRrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVRRr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVRRR<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVVVrr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVVRr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVVRR<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVVVVr<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVVr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVVVR<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVVR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVVVV<C0, C1, C2, C3, C4, C5>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(VVVVVV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void Wrrrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(Wrrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WRrrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WRrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WRRrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WRRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WRRRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WRRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WRRRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WRRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WRRRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WRRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5);
				}
			}));
			return this;
		}
		public delegate void WVrrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVRrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVRRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVRRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVRRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVVrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVVVrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVVRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVVRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVVVVr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVVr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVVVR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVVR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVVVV<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WVVVVV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWrrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWrrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWRrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWRrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWRRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWRRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWRRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWRRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWRRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWRRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5);
				}
			}));
			return this;
		}
		public delegate void WWVrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWVVrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVVRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVVRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWVVVr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVVr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVVVR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVVR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVVVV<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWVVVV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWrrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, in C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWrrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWRrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWRrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWRRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWRRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWRRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWRRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5);
				}
			}));
			return this;
		}
		public delegate void WWWVrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWVRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWVRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWVVr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVVr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWVVR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVVR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWVVV<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWVVV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWrr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWrr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWRr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWRr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWRR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWRR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5);
				}
			}));
			return this;
		}
		public delegate void WWWWVr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWVr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWVR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWVR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWVV<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWVV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWWr<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWWr<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWWR<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWWR<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5);
				}
			}));
			return this;
		}
		public delegate void WWWWWV<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWWV<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWWW<C0, C1, C2, C3, C4, C5>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5>(WWWWWW<C0, C1, C2, C3, C4, C5> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5);
				}
			}));
			return this;
		}
		public delegate void rrrrrrr<C0, C1, C2, C3, C4, C5, C6>(in C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(rrrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void Rrrrrrr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(Rrrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRrrrrr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRRrrrr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRRRrrr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRRRRrr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRRRRRr<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void RRRRRRR<C0, C1, C2, C3, C4, C5, C6>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(RRRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void Vrrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(Vrrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRRrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRRRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRRRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRRRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VRRRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VRRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVRrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVRRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVRRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVRRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVRRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVVrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVVVrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVVVVrr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVVRr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVVRR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVVVVr<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVVVR<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVVVVV<C0, C1, C2, C3, C4, C5, C6>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(VVVVVVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void Wrrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(Wrrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRRrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRRRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRRRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRRRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WRRRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WRRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WVrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVRrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVRRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVRRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVRRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVRRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVVrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVVVrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVVVVrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVVRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVVRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVVVVr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVVVR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVVVVV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WVVVVVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWrrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWrrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWRrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWRrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWRRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWRRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWRRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWRRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWRRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWRRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWRRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWRRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WWVrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWVVrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWVVVrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVVRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVVRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVVVVr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVVVR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVVVVV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWVVVVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWrrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWrrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWRrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWRrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWRRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWRRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWRRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWRRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWRRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWRRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WWWVrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWVVrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVVRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVVRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWVVVr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVVVR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWVVVV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWVVVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWrrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWrrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWRrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWRrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWRRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWRRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWRRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWRRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WWWWVrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWVRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWVRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWVVr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWVVR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWVVV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWVVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWrr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWrr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWRr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWRr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWRR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWRR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WWWWWVr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWVr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWVR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWVR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWWVV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWVV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWWr<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, in C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWWr<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWWR<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, in C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWWR<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6);
				}
			}));
			return this;
		}
		public delegate void WWWWWWV<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6? c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWWV<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWWW<C0, C1, C2, C3, C4, C5, C6>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6 c6) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6>(WWWWWWW<C0, C1, C2, C3, C4, C5, C6> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withWriteTypes, id6);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6);
				}
			}));
			return this;
		}
		public delegate void rrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(rrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void Rrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(Rrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void RRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(in C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(RRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withReadTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(in c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void Vrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(Vrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
				}
			}));
			return this;
		}
		public delegate void VVrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void VVVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void VVVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void VVVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void VVVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void VVVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void VVVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void VVVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0? c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(VVVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(anyWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				bool flag0 = chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					C0? c0 = flag0 ? array0.Get<C0>(i) : null;
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag0) array0[i] = c0;
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void Wrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(Wrrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, in C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WRRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withReadTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, in c1, in c2, in c3, in c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WVrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
				}
			}));
			return this;
		}
		public delegate void WVVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WVVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WVVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WVVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WVVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WVVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WVVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1? c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WVVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(anyWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				bool flag1 = chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					C1? c1 = flag1 ? array1.Get<C1>(i) : null;
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag1) array1[i] = c1;
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWrrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, in C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWRRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withReadTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, in c2, in c3, in c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
				}
			}));
			return this;
		}
		public delegate void WWVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2? c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWVVVVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(anyWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				bool flag2 = chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					C2? c2 = flag2 ? array2.Get<C2>(i) : null;
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag2) array2[i] = c2;
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWrrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWrrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWRrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWRrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWRRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWRRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWRRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWRRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWRRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWRRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWRRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, in C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWRRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withReadTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, in c3, in c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWWVrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
				}
			}));
			return this;
		}
		public delegate void WWWVVrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWVVVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWVVVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWVVVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWVVVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3? c3, ref C4? c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWVVVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(anyWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				bool flag3 = chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					C3? c3 = flag3 ? array3.Get<C3>(i) : null;
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag3) array3[i] = c3;
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWrrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWrrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWRrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWRrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWRRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWRRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWRRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWRRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWRRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, in C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWRRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withReadTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, in c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWWWVrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag4) array4[i] = c4;
				}
			}));
			return this;
		}
		public delegate void WWWWVVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWVVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWVVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWVVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4? c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWVVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(anyWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				bool flag4 = chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					C4? c4 = flag4 ? array4.Get<C4>(i) : null;
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag4) array4[i] = c4;
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWrrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWrrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWRrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWRrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWRRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWRRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWRRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, in C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWRRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withReadTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, in c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWWWWVrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWVRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWVRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag5) array5[i] = c5;
				}
			}));
			return this;
		}
		public delegate void WWWWWVVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWVVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWVVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5? c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWVVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(anyWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				bool flag5 = chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					C5? c5 = flag5 ? array5.Get<C5>(i) : null;
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag5) array5[i] = c5;
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWrr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, in C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWrr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWRr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, in C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWRr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWRR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, in C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWRR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withReadTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, in c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWWWWWVr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6? c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWVr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWVR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6? c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWVR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag6) array6[i] = c6;
				}
			}));
			return this;
		}
		public delegate void WWWWWWVV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6? c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWVV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(anyWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				bool flag6 = chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					C6? c6 = flag6 ? array6.Get<C6>(i) : null;
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag6) array6[i] = c6;
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWWr<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6 c6, in C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWWr<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWWR<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6 c6, in C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWWR<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withReadTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, in c7);
				}
			}));
			return this;
		}
		public delegate void WWWWWWWV<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6 c6, ref C7? c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWWV<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(anyWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				bool flag7 = chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					C7? c7 = flag7 ? array7.Get<C7>(i) : null;
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
					if(flag7) array7[i] = c7;
				}
			}));
			return this;
		}
		public delegate void WWWWWWWW<C0, C1, C2, C3, C4, C5, C6, C7>(ref C0 c0, ref C1 c1, ref C2 c2, ref C3 c3, ref C4 c4, ref C5 c5, ref C6 c6, ref C7 c7) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent;
		public IIteratorPhase2 Iterate<C0, C1, C2, C3, C4, C5, C6, C7>(WWWWWWWW<C0, C1, C2, C3, C4, C5, C6, C7> iterator) where C0 : struct, IComponent where C1 : struct, IComponent where C2 : struct, IComponent where C3 : struct, IComponent where C4 : struct, IComponent where C5 : struct, IComponent where C6 : struct, IComponent where C7 : struct, IComponent
		{
			TypeId id0 = TypeManager.GetIdFromType(typeof(C0));
			AddType(withWriteTypes, id0);
			TypeId id1 = TypeManager.GetIdFromType(typeof(C1));
			AddType(withWriteTypes, id1);
			TypeId id2 = TypeManager.GetIdFromType(typeof(C2));
			AddType(withWriteTypes, id2);
			TypeId id3 = TypeManager.GetIdFromType(typeof(C3));
			AddType(withWriteTypes, id3);
			TypeId id4 = TypeManager.GetIdFromType(typeof(C4));
			AddType(withWriteTypes, id4);
			TypeId id5 = TypeManager.GetIdFromType(typeof(C5));
			AddType(withWriteTypes, id5);
			TypeId id6 = TypeManager.GetIdFromType(typeof(C6));
			AddType(withWriteTypes, id6);
			TypeId id7 = TypeManager.GetIdFromType(typeof(C7));
			AddType(withWriteTypes, id7);
			BakeSettings();
			Handle = new WorkAsyncHandle(() => IteratorUtils.ForEachChunk(world, Settings, Version, (chunk) => 
			{
				chunk.TryGetComponents(id0, out ComponentArray array0);
				chunk.TryGetComponents(id1, out ComponentArray array1);
				chunk.TryGetComponents(id2, out ComponentArray array2);
				chunk.TryGetComponents(id3, out ComponentArray array3);
				chunk.TryGetComponents(id4, out ComponentArray array4);
				chunk.TryGetComponents(id5, out ComponentArray array5);
				chunk.TryGetComponents(id6, out ComponentArray array6);
				chunk.TryGetComponents(id7, out ComponentArray array7);
				for (int i = 0; i < chunk.Count; i++)
				{
					ref C0 c0 = ref array0.GetRef<C0>(i);
					ref C1 c1 = ref array1.GetRef<C1>(i);
					ref C2 c2 = ref array2.GetRef<C2>(i);
					ref C3 c3 = ref array3.GetRef<C3>(i);
					ref C4 c4 = ref array4.GetRef<C4>(i);
					ref C5 c5 = ref array5.GetRef<C5>(i);
					ref C6 c6 = ref array6.GetRef<C6>(i);
					ref C7 c7 = ref array7.GetRef<C7>(i);
					iterator(ref c0, ref c1, ref c2, ref c3, ref c4, ref c5, ref c6, ref c7);
				}
			}));
			return this;
		}
    }
}